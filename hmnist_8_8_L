# 1. Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# 2. Load CSV
csv_path = r"C:\Users\ajabrao chilhate\Downloads\archive (2)\hmnist_8_8_L.csv"
df = pd.read_csv(csv_path)

# 3. Preprocess Data
X = df.drop('label', axis=1).values
y = df['label'].values

# Normalize and reshape
X = X.reshape(-1, 8, 8, 1).astype('float32') / 255.0
y_cat = to_categorical(y, num_classes=7)

# 4. Train-test Split
X_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, stratify=y, random_state=42)

# 5. Build CNN Model
model = Sequential([
    Conv2D(16, (2, 2), activation='relu', input_shape=(8, 8, 1)),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dense(7, activation='softmax')
])

model.compile(optimizer=Adam(1e-4), loss='categorical_crossentropy', metrics=['accuracy'])

# 6. Train Model
history = model.fit(X_train, y_train, validation_split=0.1, epochs=10, batch_size=32)

# 7. Evaluate Model
y_pred = np.argmax(model.predict(X_test), axis=1)
y_true = np.argmax(y_test, axis=1)

print(classification_report(y_true, y_pred))
cm = confusion_matrix(y_true, y_pred)
sns.heatmap(cm, annot=True, fmt='d')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

# 8. Save Model
model.save("hmnist_8_8_L_model.h5")
